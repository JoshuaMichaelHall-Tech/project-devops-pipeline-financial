name: Development CI/CD Pipeline

on:
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'main'
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev
  ECR_REPOSITORY: financial-app-dev
  TF_WORKING_DIR: src/infra/terraform/dev

jobs:
  # Code validation
  code-validation:
    name: Code Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Format check
        run: npm run format:check
      
      - name: Run static analysis
        run: npm run analyze

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-validation
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run dependency vulnerability scan
        run: npm audit --audit-level=high

      - name: Run secrets scanning
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .github/gitleaks.toml
      
      - name: Run SAST scan
        run: npm run security:sast
      
      - name: Check npm packages
        run: npm run security:dependencies

  # Compliance validation
  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install compliance tools
        run: pip install -r config/policy/requirements.txt
      
      - name: Run PCI-DSS compliance checks
        run: python scripts/compliance-check.py --standard pci-dss
      
      - name: Run SOC 2 compliance checks
        run: python scripts/compliance-check.py --standard soc2
      
      - name: Generate compliance report
        run: python scripts/generate-compliance-report.py
        
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: reports/compliance-report.pdf

  # Build and test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: compliance-check
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Generate code coverage
        run: npm run test:coverage
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: reports/tests/

  # Infrastructure validation
  infra-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
      
      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
      
      - name: Run tfsec
        run: |
          curl -L https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64 -o tfsec
          chmod +x tfsec
          ./tfsec ${{ env.TF_WORKING_DIR }}

  # Deployment to dev
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [infra-validation, build-test]
    if: github.ref == 'refs/heads/main'
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Deploy application
        run: |
          aws ecs update-service --cluster financial-dev-cluster --service financial-dev-service --force-new-deployment
      
      - name: Run smoke tests
        run: npm run test:smoke -- --env=dev
      
      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Development Deployment Completed Successfully! :rocket:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Development Deployment Completed Successfully!* :rocket:\n\n*Build:* ${{ github.sha }}\n*Deployed by:* ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}